[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
augroup denite_filter
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
  endfunction
augroup END

let s:denite_win_width_percent = 0.85
let s:denite_win_height_percent = 0.7
let s:denite_default_options = {
    \ 'split': 'floating',
    \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
    \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
    \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
    \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
    \ 'highlight_filter_background': 'DeniteFilter',
    \ 'prompt': '$ ',
    \ 'start_filter': v:true,
    \ }
let s:denite_option_array = []
for [key, value] in items(s:denite_default_options)
  call add(s:denite_option_array, '-'.key.'='.value)
endfor
call denite#custom#option('default', s:denite_default_options)

call denite#custom#var('file/rec', 'command',
    \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
    \ [ '.git/', '.ropeproject/', '__pycache__/',
    \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])

call denite#custom#var('grep', 'command', ['ag'])
call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

command! -nargs=? Dgrep call s:Dgrep(<f-args>)
function s:Dgrep(...)
  if a:0 > 0
    execute(':Denite -buffer-name=grep-buffer-denite grep -path='.a:1)
  else
    execute(':Denite -buffer-name=grep-buffer-denite '.join(s:denite_option_array, ' ').' grep')
  endif
endfunction

command! Dresume execute(':Denite -resume -buffer-name=grep-buffer-denite '.join(s:denite_option_array, ' ').'')

command! Dnext execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=+1 -immediately '.join(s:denite_option_array, ' ').'')

command! Dprev execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=-1 -immediately '.join(s:denite_option_array, ' ').'')

call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>', 'noremap')
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
		let g:lightline = {
				\ 'colorscheme': 'molokai',
				\ 'component': {
				\   'lineinfo': ' %3l:%-2v',
				\ },
				\ 'component_function': {
				\   'readonly': 'LightlineReadonly',
				\   'fugitive': 'LightlineFugitive'
				\ },
				\ 'separator': { 'left': '', 'right': '' },
				\ 'subseparator': { 'left': '', 'right': '' }
				\ }
		function! LightlineReadonly()
				return &readonly ? '' : ''
		endfunction
		function! LightlineFugitive()
				if exists('*fugitive#head')
						let branch = fugitive#head()
						return branch !=# '' ? ''.branch : ''
				endif
				return ''
		endfunction
'''

[[plugins]]
repo = 'vim-syntastic/syntastic'
hook_add = '''
let g:syntastic_python_checkers = ['pylint']
'''
#hook_add = '''
#set statusline+=%#warningmsg#
#set statusline+=%{SyntasticStatuslineFlag()}
#set statusline+=%*

#let g:syntastic_enable_signs = 1
#let g:syntastic_always_populate_loc_list = 1
#let g:syntastic_auto_loc_list = 1
#let g:syntastic_check_on_open = 1
#let g:syntastic_check_on_wq = 0

#let g:syntastic_javascript_checkers=['eslint']
#'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
		let g:quickrun_config = {}
		let g:quickrun_config.markdown = {
				\ 'type': 'markdown/pandoc',
				\ 'cmdopt': '-s',
				\ 'outputter': 'browser'
				\ }
'''

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
		imap <C-k>	<Plug>(neosnippet_expand_or_jump)
		smap <C-k>	<Plug>(neosnippet_expand_or_jump)
		xmap <C-k>	<Plug>(neosnippet_expand_target)

		imap <expr><TAB>
				\ pumvisible() ? "\<C-n>" :
				\ neosnippet#expandable_or_jumpable() ?
				\		"\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
		smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
		\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

		if has('conceal')
				set conceallevel=2 concealcursor=niv
		endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'miyakogi/seiya.vim'
#hook_add = 'let g:seiya_auto_enable=1'
hook_add = 'map <silent><C-s> :SeiyaEnable<CR>'

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'thinkpixellab/flatland'

[[plugins]]
repo = 'thinca/vim-showtime'
